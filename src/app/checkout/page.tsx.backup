'use client';

import { useEffect, useState, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { useAppContext } from '@/hooks/useAppContext';
import { useCartStore } from '@/store/cart-store';
import { useAuth } from '@/hooks/use-auth';
import { useUserTracking } from '@/hooks/useUserTracking';
import { createOrder, quickRegisterCustomer, findCustomerByPhone } from '@/services/api';
import { toast } from 'react-hot-toast';
import { ArrowLeft, MapPin, Loader2, User, Phone } from 'lucide-react';
import { PaymentMethodSelection } from '@/components/checkout/PaymentMethodSelection';
import { PixPayment } from '@/components/checkout/PixPayment';
import { paymentService } from '@/services/paymentService';
// import { useStoreStatus } from '@/infrastructure/context/StoreStatusContext';

interface DeliveryAddress {
  street: string;
  number: string;
  complement: string;
  neighborhood: string;
  city: string;
  zipCode: string;
}



// Modal de Identificação do Cliente
function CustomerIdentificationModal({ 
  isOpen, 
  onClose, 
  onCustomerIdentified 
}: { 
  isOpen: boolean; 
  onClose: () => void; 
  onCustomerIdentified: (customer: any) => void; 
}) {
  const [phone, setPhone] = useState('');
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [isNewCustomer, setIsNewCustomer] = useState(false);
  const [loading, setLoading] = useState(false);
  const [searchingCustomer, setSearchingCustomer] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});
  const { data: contextData } = useAppContext();

  // Formatar telefone durante digitação
  const formatPhone = (value: string) => {
    const numbers = value.replace(/\D/g, '');
    if (numbers.length <= 11) {
      return numbers.replace(/(\d{2})(\d{4,5})(\d{4})/, '($1) $2-$3');
    }
    return value;
  };

  const handlePhoneChange = async (value: string) => {
    const formattedPhone = formatPhone(value);
    setPhone(formattedPhone);
    setErrors(prev => ({ ...prev, phone: '' }));

    // Extrair apenas números para busca
    const numbersOnly = value.replace(/\D/g, '');
    
    if (numbersOnly.length >= 10 && contextData.storeId) {
      setSearchingCustomer(true);
      try {
        const response = await findCustomerByPhone(numbersOnly, contextData.storeId);
        if (response.data?.success && response.data?.data) {
          // Cliente existente encontrado
          setIsNewCustomer(false);
          setName(response.data.data.name || '');
          setEmail(response.data.data.email || '');
        } else {
          // Cliente não encontrado, será novo cadastro
          setIsNewCustomer(true);
          setName('');
          setEmail('');
        }
      } catch (error) {
        console.warn('Cliente não encontrado, será novo cadastro:', error);
        setIsNewCustomer(true);
        setName('');
        setEmail('');
      } finally {
        setSearchingCustomer(false);
      }
    } else {
      // Reset se telefone incompleto
      setIsNewCustomer(false);
      setName('');
      setEmail('');
    }
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!phone.trim()) {
      newErrors.phone = 'Telefone é obrigatório';
    } else {
      const numbersOnly = phone.replace(/\D/g, '');
      if (numbersOnly.length < 10) {
        newErrors.phone = 'Telefone deve ter pelo menos 10 dígitos';
      }
    }

    if (!name.trim()) {
      newErrors.name = 'Nome é obrigatório';
    } else if (name.trim().length < 2) {
      newErrors.name = 'Nome deve ter pelo menos 2 caracteres';
    }

    if (email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      newErrors.email = 'Email inválido';
    }

    return newErrors;
  };

  const handleSubmit = async () => {
    setErrors({});
    
    const validationErrors = validateForm();
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    if (!contextData.storeId) {
      toast.error('Erro: Loja não identificada');
      return;
    }

    setLoading(true);
    try {
      const numbersOnly = phone.replace(/\D/g, '');
      
      if (isNewCustomer) {
        // Cadastro rápido
        const response = await quickRegisterCustomer({
          name: name.trim(),
          phone: numbersOnly,
          email: email.trim() || undefined,
          tenant_id: parseInt(contextData.storeId)
        });
        
        if (response.data?.success && response.data?.data) {
          onCustomerIdentified(response.data.data);
          onClose();
          toast.success('Cliente cadastrado com sucesso!');
        } else {
          throw new Error(response.data?.message || 'Erro ao cadastrar cliente');
        }
      } else {
        // Cliente existente
        const response = await findCustomerByPhone(numbersOnly, contextData.storeId);
        if (response.data?.success && response.data?.data) {
          onCustomerIdentified(response.data.data);
          onClose();
          toast.success('Cliente identificado com sucesso!');
        } else {
          throw new Error('Cliente não encontrado');
        }
      }
    } catch (error: any) {
      console.error('Erro ao identificar cliente:', error);
      const errorMessage = error.response?.data?.message || error.message || 'Erro ao identificar cliente';
      toast.error(errorMessage);
      setErrors({ general: errorMessage });
    } finally {
      setLoading(false);
    }
  };

  // Reset form when modal opens/closes
  useEffect(() => {
    if (isOpen) {
      setPhone('');
      setName('');
      setEmail('');
      setIsNewCustomer(false);
      setErrors({});
    }
  }, [isOpen]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg p-6 w-full max-w-md">
        <h2 className="text-xl font-semibold mb-4 flex items-center">
          <User className="w-5 h-5 mr-2" />
          Identificação do Cliente
        </h2>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Telefone *
            </label>
            <div className="relative">
              <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="tel"
                value={phone}
                onChange={(e) => handlePhoneChange(e.target.value)}
                placeholder="(11) 99999-9999"
                className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                disabled={loading}
              />
            </div>
          </div>

          {isNewCustomer && (
            <>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Nome *
                </label>
                <input
                  type="text"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  placeholder="Seu nome completo"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  E-mail (opcional)
                </label>
                <input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="seu@email.com"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </>
          )}

          {!isNewCustomer && name && (
            <div className="bg-green-50 border border-green-200 rounded-md p-3">
              <p className="text-green-800 text-sm">
                Cliente encontrado: <strong>{name}</strong>
              </p>
            </div>
          )}
        </div>

        <div className="flex justify-end space-x-3 mt-6">
          <button
            onClick={onClose}
            className="px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50"
            disabled={loading}
          >
            Cancelar
          </button>
          <button
            onClick={handleSubmit}
            disabled={loading || !phone || !name}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
          >
            {loading && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
            {isNewCustomer ? 'Cadastrar' : 'Continuar'}
          </button>
        </div>
      </div>
    </div>
  );
}

function CheckoutPageContent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { data: contextData, isValid: contextValid, isLoading: contextLoading } = useAppContext(searchParams || undefined);
  const { isAuthenticated, customer } = useAuth();
  const { userId, associateWithOrder } = useUserTracking();
  const [submitting, setSubmitting] = useState(false);
  const [showCustomerModal, setShowCustomerModal] = useState(false);
  const [identifiedCustomer, setIdentifiedCustomer] = useState<any>(null);
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  
  const storeId = contextData.storeId;
  
  // Cart store
  const { 
    items, 
    totalPrice, 
    clearCart,
    setContext,
    setDeliveryMode
  } = useCartStore();

  // Form states
  const [customerData, setCustomerData] = useState({
    name: customer?.name || '',
    phone: customer?.phone || '',
    email: customer?.email || ''
  });

  const [deliveryAddress, setDeliveryAddress] = useState<DeliveryAddress>({
    street: '',
    number: '',
    complement: '',
    neighborhood: '',
    city: '',
    zipCode: ''
  });

  const [selectedPayment, setSelectedPayment] = useState<string>('');
  const [changeAmount, setChangeAmount] = useState<string>('');
  const [paymentData, setPaymentData] = useState<any>({});
  const [orderNotes, setOrderNotes] = useState('');
  const [showPixPayment, setShowPixPayment] = useState(false);
  const [pixPaymentData, setPixPaymentData] = useState<any>(null);
  // const { isStoreOpen } = useStoreStatus(); // Temporariamente desabilitado
  const isStoreOpen = true; // Assumir que a loja está sempre aberta por enquanto

  // Configura o contexto ao carregar a página
  useEffect(() => {
    // Se o contexto ainda está carregando, aguardar
    if (contextLoading) return;
    
    // Se não tem contexto válido, redirecionar para sessão expirada
    if (!contextValid || !storeId) {
      router.push('/404-session');
      return;
    }
    
    setContext(storeId);
    setDeliveryMode(contextData.isDelivery);
    
    // Verificar se cliente está identificado
    if (!isAuthenticated && !identifiedCustomer) {
      setShowCustomerModal(true);
    }

    // Preenche endereço se o cliente já tem um cadastrado
    if (customer?.addresses && customer.addresses.length > 0) {
      const address = customer.addresses[0];
      setDeliveryAddress({
        street: address.address || '',
        number: address.number || '',
        complement: address.complement || '',
        neighborhood: address.district || '',
        city: address.city || '',
        zipCode: address.zipcode || ''
      });
    }
  }, [contextLoading, contextValid, storeId, contextData.isDelivery, setContext, setDeliveryMode, isAuthenticated, customer, router, identifiedCustomer]);

  const handleCustomerIdentified = (customer: any) => {
    setIdentifiedCustomer(customer);
    setCustomerData({
      name: customer.name || '',
      phone: customer.phone || '',
      email: customer.email || ''
    });
  };

  // Se o contexto ainda está carregando, mostrar loading
  if (contextLoading) {
    return (
      <div className="container mx-auto p-4 text-center">
        <p>Carregando...</p>
      </div>
    );
  }

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(price);
  };

  // Função para validar dados do formulário
  const validateForm = () => {
    const errors: Record<string, string> = {};

    // Validar carrinho
    if (items.length === 0) {
      errors.cart = 'Carrinho vazio';
    }

    // Validar cliente
    if (!isAuthenticated && !identifiedCustomer) {
      errors.customer = 'Cliente não identificado';
    } else {
      // Validar dados do cliente
      if (!customerData.name.trim()) {
        errors.customerName = 'Nome é obrigatório';
      }
      if (!customerData.phone.trim()) {
        errors.customerPhone = 'Telefone é obrigatório';
      }
    }

    // Validar endereço de entrega
    if (contextData.isDelivery) {
      if (!deliveryAddress.street.trim()) {
        errors.deliveryStreet = 'Rua é obrigatória';
      }
      if (!deliveryAddress.number.trim()) {
        errors.deliveryNumber = 'Número é obrigatório';
      }
      if (!deliveryAddress.neighborhood.trim()) {
        errors.deliveryNeighborhood = 'Bairro é obrigatório';
      }
      if (!deliveryAddress.city.trim()) {
        errors.deliveryCity = 'Cidade é obrigatória';
      }
    }

    // Validar forma de pagamento
    if (!selectedPayment) {
      errors.payment = 'Selecione uma forma de pagamento';
    }

    return errors;
  };

  const handleSubmitOrder = async () => {
    // Limpar erros anteriores
    setValidationErrors({});

    // Validar contexto básico
    if (!storeId) {
      toast.error('Erro: Loja não identificada');
      return;
    }

    // Validar formulário
    const errors = validateForm();
    if (Object.keys(errors).length > 0) {
      setValidationErrors(errors);
      
      // Mostrar primeiro erro encontrado
      const firstError = Object.values(errors)[0];
      toast.error(firstError);
      
      // Se cliente não está identificado, abrir modal
      if (errors.customer) {
        setShowCustomerModal(true);
      }
      
      return;
    }

    // Validar dados do cartão se necessário
    if ((selectedPayment === 'credit' || selectedPayment === 'debit') && paymentData) {
      const cardValidation = paymentService.validateCardData({
        ...paymentData,
        type: selectedPayment
      });
      
      if (!cardValidation.isValid) {
        toast.error(cardValidation.errors[0]);
        return;
      }
    }

    setSubmitting(true);

    try {
      // Preparar dados do cliente para o pedido
      const currentCustomer = isAuthenticated ? customer : identifiedCustomer;
      
      // Preparar dados do pedido
      const orderData = {
        token_company: storeId,
        customer_data: {
          name: customerData.name.trim(),
          phone: customerData.phone.trim(),
          email: customerData.email.trim() || undefined,
          customer_id: currentCustomer?.id || undefined
        },
        products: items.map(item => ({
          identify: item.identify || item.productId,
          quantity: item.quantity,
          additionals: item.additionals?.map(add => add.id) || []
        })),
        comment: orderNotes.trim() || undefined,
        type: contextData.isDelivery ? "delivery" : "local",
        delivery_address: contextData.isDelivery ? {
          street: deliveryAddress.street.trim(),
          number: deliveryAddress.number.trim(),
          complement: deliveryAddress.complement.trim() || undefined,
          neighborhood: deliveryAddress.neighborhood.trim(),
          city: deliveryAddress.city.trim(),
          zip_code: deliveryAddress.zipCode.trim() || undefined
        } : undefined,
        payment_method: selectedPayment,
        payment_data: paymentData,
        change_amount: selectedPayment === 'money' && changeAmount ? parseFloat(changeAmount) : undefined,
        user_tracking: {
          user_id: userId || "anonymous",
          source: "web",
          device_id: "anonymous"
        }
      };

      console.log('Enviando pedido:', orderData);

      // Criar pedido
      const response = await createOrder(orderData);
      
      if (!response.data?.success) {
        throw new Error(response.data?.message || 'Erro ao criar pedido');
      }

      const order = response.data.data;

      // Associar tracking se disponível
      if (userId && order?.id) {
        try {
          await associateWithOrder(order.id.toString());
        } catch (trackingError) {
          console.warn('Erro ao associar tracking:', trackingError);
          // Não bloquear o fluxo por erro de tracking
        }
      }

      // Se for PIX, gerar pagamento PIX
      if (selectedPayment === 'pix') {
        try {
          const pixData = await paymentService.generatePixPayment(order.id || order.uuid, totalPrice());
          setPixPaymentData(pixData);
          setShowPixPayment(true);
          
          // Não limpar carrinho ainda - só após confirmação do pagamento
          toast.success('Pedido criado! Complete o pagamento PIX.');
          return;
        } catch (pixError: any) {
          console.error('Erro ao gerar PIX:', pixError);
          toast.error(pixError.message || 'Erro ao gerar pagamento PIX');
          return;
        }
      }

      // Para outros métodos de pagamento, processar normalmente
      if (selectedPayment === 'credit' || selectedPayment === 'debit') {
        try {
          const paymentResult = await paymentService.processCardPayment(
            order.id || order.uuid,
            totalPrice(),
            { ...paymentData, type: selectedPayment }
          );
          
          if (!paymentResult.success) {
            throw new Error(paymentResult.message || 'Erro no pagamento');
          }
          
          toast.success('Pagamento processado com sucesso!');
        } catch (paymentError: any) {
          console.error('Erro no pagamento:', paymentError);
          toast.error(paymentError.message || 'Erro ao processar pagamento');
          return;
        }
      }

      // Limpar carrinho
      clearCart();

      // Mostrar sucesso
      toast.success('Pedido realizado com sucesso!');

      // Redirecionar para página de sucesso ou pedidos
      if (order?.uuid) {
        router.push(`/orders/${order.uuid}`);
      } else {
        router.push('/orders');
      }

    } catch (error: any) {
      console.error('Erro ao finalizar pedido:', error);
      
      // Tratar diferentes tipos de erro
      let errorMessage = 'Erro ao finalizar pedido. Tente novamente.';
      
      if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      toast.error(errorMessage);
      
      // Se erro relacionado ao cliente, reabrir modal
      if (errorMessage.toLowerCase().includes('cliente') || errorMessage.toLowerCase().includes('customer')) {
        setShowCustomerModal(true);
      }
      
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <button
              onClick={() => router.back()}
              className="flex items-center text-gray-600 hover:text-gray-800"
            >
              <ArrowLeft className="w-5 h-5 mr-2" />
              Voltar
            </button>
            <h1 className="text-xl font-semibold text-gray-900">Finalizar Pedido</h1>
            <div className="w-8"></div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-6">
        <div className="max-w-2xl mx-auto">
          {/* Resumo do Pedido */}
          <div className="bg-white rounded-lg shadow-sm border p-6 mb-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">Resumo do Pedido</h2>
            
            <div className="space-y-3">
              {items.map((item, index) => (
                <div key={index} className="flex justify-between items-center py-2 border-b border-gray-100 last:border-b-0">
                  <div className="flex-1">
                    <p className="font-medium text-gray-900">{item.name}</p>
                    <p className="text-sm text-gray-600">Qtd: {item.quantity}</p>
                  </div>
                  <p className="font-semibold text-gray-900">{formatPrice(item.price * item.quantity)}</p>
                </div>
              ))}
            </div>
            
            <div className="mt-4 pt-4 border-t border-gray-200">
              <div className="flex justify-between items-center">
                <span className="text-lg font-semibold text-gray-900">Total</span>
                                 <span className="text-xl font-bold text-gray-900">{formatPrice(totalPrice())}</span>
              </div>
            </div>
          </div>

          {/* Identificação do Cliente */}
          <div className={`bg-white rounded-lg shadow-sm border p-6 mb-6 ${validationErrors.customer || validationErrors.customerName || validationErrors.customerPhone ? 'border-red-300' : ''}`}>
            <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
              <User className="w-5 h-5 mr-2" />
              Dados do Cliente
              {(isAuthenticated || identifiedCustomer) && (
                <span className="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  ✓ Identificado
                </span>
              )}
            </h2>
            
            {isAuthenticated || identifiedCustomer ? (
              <div className="space-y-3">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Nome</label>
                  <input
                    type="text"
                    value={customerData.name}
                    onChange={(e) => setCustomerData({...customerData, name: e.target.value})}
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      validationErrors.customerName ? 'border-red-300' : 'border-gray-300'
                    }`}
                    placeholder="Seu nome completo"
                  />
                  {validationErrors.customerName && (
                    <p className="text-sm text-red-600 mt-1">{validationErrors.customerName}</p>
                  )}
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Telefone</label>
                  <input
                    type="tel"
                    value={customerData.phone}
                    onChange={(e) => setCustomerData({...customerData, phone: e.target.value})}
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      validationErrors.customerPhone ? 'border-red-300' : 'border-gray-300'
                    }`}
                    placeholder="(11) 99999-9999"
                  />
                  {validationErrors.customerPhone && (
                    <p className="text-sm text-red-600 mt-1">{validationErrors.customerPhone}</p>
                  )}
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">E-mail (opcional)</label>
                  <input
                    type="email"
                    value={customerData.email}
                    onChange={(e) => setCustomerData({...customerData, email: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="seu@email.com"
                  />
                </div>
              </div>
            ) : (
              <div className="text-center py-8">
                <User className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-600 mb-4">Identifique-se para continuar</p>
                <button
                  onClick={() => setShowCustomerModal(true)}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                >
                  Identificar Cliente
                </button>
                {validationErrors.customer && (
                  <p className="text-sm text-red-600 mt-2">{validationErrors.customer}</p>
                )}
              </div>
            )}
          </div>

          {/* Endereço de Entrega (apenas para delivery) */}
          {contextData.isDelivery && (
            <div className={`bg-white rounded-lg shadow-sm border p-6 mb-6 ${
              validationErrors.deliveryStreet || validationErrors.deliveryNumber || 
              validationErrors.deliveryNeighborhood || validationErrors.deliveryCity ? 'border-red-300' : ''
            }`}>
              <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                <MapPin className="w-5 h-5 mr-2" />
                Endereço de Entrega
              </h2>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Rua *</label>
                  <input
                    type="text"
                    value={deliveryAddress.street}
                    onChange={(e) => setDeliveryAddress({...deliveryAddress, street: e.target.value})}
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      validationErrors.deliveryStreet ? 'border-red-300' : 'border-gray-300'
                    }`}
                    placeholder="Nome da rua"
                  />
                  {validationErrors.deliveryStreet && (
                    <p className="text-sm text-red-600 mt-1">{validationErrors.deliveryStreet}</p>
                  )}
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Número *</label>
                  <input
                    type="text"
                    value={deliveryAddress.number}
                    onChange={(e) => setDeliveryAddress({...deliveryAddress, number: e.target.value})}
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      validationErrors.deliveryNumber ? 'border-red-300' : 'border-gray-300'
                    }`}
                    placeholder="123"
                  />
                  {validationErrors.deliveryNumber && (
                    <p className="text-sm text-red-600 mt-1">{validationErrors.deliveryNumber}</p>
                  )}
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Complemento</label>
                  <input
                    type="text"
                    value={deliveryAddress.complement}
                    onChange={(e) => setDeliveryAddress({...deliveryAddress, complement: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Apto, bloco, etc."
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Bairro *</label>
                  <input
                    type="text"
                    value={deliveryAddress.neighborhood}
                    onChange={(e) => setDeliveryAddress({...deliveryAddress, neighborhood: e.target.value})}
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      validationErrors.deliveryNeighborhood ? 'border-red-300' : 'border-gray-300'
                    }`}
                    placeholder="Nome do bairro"
                  />
                  {validationErrors.deliveryNeighborhood && (
                    <p className="text-sm text-red-600 mt-1">{validationErrors.deliveryNeighborhood}</p>
                  )}
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Cidade *</label>
                  <input
                    type="text"
                    value={deliveryAddress.city}
                    onChange={(e) => setDeliveryAddress({...deliveryAddress, city: e.target.value})}
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      validationErrors.deliveryCity ? 'border-red-300' : 'border-gray-300'
                    }`}
                    placeholder="Nome da cidade"
                  />
                  {validationErrors.deliveryCity && (
                    <p className="text-sm text-red-600 mt-1">{validationErrors.deliveryCity}</p>
                  )}
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">CEP</label>
                  <input
                    type="text"
                    value={deliveryAddress.zipCode}
                    onChange={(e) => setDeliveryAddress({...deliveryAddress, zipCode: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="00000-000"
                  />
                </div>
              </div>
            </div>
          )}

          {/* Forma de Pagamento */}
          <div className={`bg-white rounded-lg shadow-sm border mb-6 ${validationErrors.payment ? 'border-red-300' : ''}`}>
            <PaymentMethodSelection
              selectedMethod={selectedPayment}
              onMethodSelect={(methodId) => {
                setSelectedPayment(methodId);
                setValidationErrors(prev => ({ ...prev, payment: '' }));
              }}
              onPaymentDataChange={setPaymentData}
              changeAmount={changeAmount}
              onChangeAmountChange={setChangeAmount}
              className="p-6"
            />
            {validationErrors.payment && (
              <p className="text-sm text-red-600 mt-2 px-6 pb-4">{validationErrors.payment}</p>
            )}
          </div>

          {/* Observações */}
          <div className="bg-white rounded-lg shadow-sm border p-6 mb-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">Observações</h2>
            <textarea
              value={orderNotes}
              onChange={(e) => setOrderNotes(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows={3}
              placeholder="Alguma observação sobre o pedido?"
            />
          </div>

          {/* PIX Payment Display */}
          {showPixPayment && pixPaymentData && (
            <div className="mb-6">
              <PixPayment
                orderId={pixPaymentData.orderId}
                amount={pixPaymentData.amount}
                pixCode={pixPaymentData.pixCode}
                qrCodeUrl={pixPaymentData.qrCodeUrl}
                onPaymentConfirmed={() => {
                  clearCart();
                  toast.success('Pagamento confirmado! Pedido finalizado.');
                  router.push(`/orders/${pixPaymentData.orderId}`);
                }}
              />
            </div>
          )}

          {/* Botão Finalizar */}
          {!showPixPayment && (
            <button
              onClick={handleSubmitOrder}
              disabled={submitting || !isStoreOpen}
              className="w-full bg-blue-600 text-white py-4 px-6 rounded-lg font-semibold text-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center transition-colors"
            >
              {submitting && <Loader2 className="w-5 h-5 mr-2 animate-spin" />}
              Finalizar Pedido - {formatPrice(totalPrice())}
            </button>
          )}
        </div>
      </div>

      {/* Modal de Identificação do Cliente */}
      <CustomerIdentificationModal
        isOpen={showCustomerModal}
        onClose={() => setShowCustomerModal(false)}
        onCustomerIdentified={handleCustomerIdentified}
      />
    </div>
  );
}

export default function CheckoutPage() {
  return (
    <Suspense fallback={<div>Carregando...</div>}>
      <CheckoutPageContent />
    </Suspense>
  );
}

            {/* Troco para dinheiro */}
            {selectedPayment === 'money' && (
              <div className="mt-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Troco para (opcional)
                </label>
                <input
                  type="number"
                  value={changeAmount}
                  onChange={(e) => setChangeAmount(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="0,00"
                  step="0.01"
                  min="0"
                />
              </div>
            )}
          </div>

          {/* Observações */}
          <div className="bg-white rounded-lg shadow-sm border p-6 mb-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">Observações</h2>
            <textarea
              value={orderNotes}
              onChange={(e) => setOrderNotes(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows={3}
              placeholder="Alguma observação sobre o pedido?"
            />
          </div>

          {/* Botão Finalizar */}
          <button
            onClick={handleSubmitOrder}
            disabled={submitting || !isStoreOpen}
            className="w-full bg-blue-600 text-white py-4 px-6 rounded-lg font-semibold text-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
          >
            {submitting && <Loader2 className="w-5 h-5 mr-2 animate-spin" />}
            Finalizar Pedido - {formatPrice(totalPrice())}
          </button>
        </div>
      </div>

      {/* Modal de Identificação do Cliente */}
      <CustomerIdentificationModal
        isOpen={showCustomerModal}
        onClose={() => setShowCustomerModal(false)}
        onCustomerIdentified={handleCustomerIdentified}
      />
    </div>
  );
}

export default function CheckoutPage() {
  return (
    <Suspense fallback={<div>Carregando...</div>}>
      <CheckoutPageContent />
    </Suspense>
  );
} 